{"version":3,"sources":["../../src/serialization/dag.js"],"names":["dagNodeFromJson","obj","Promise","resolve","reject","links","map","dagLinkFromJson","create","data","err","dagNode","dagNodeToJson","__ipfsPostMsgProxyType","dagLinkToJson","isDagNode","isDAGNode","isDagNodeJson","preDagNodeFromJson","index","args","then","preDagNodeToJson","name","size","multihash","link","Object","assign","toJSON","isDagLink","isDAGLink","isDagLinkJson","preDagLinkFromJson","preDagLinkToJson"],"mappings":"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","file":"dag.js","sourcesContent":["import { DAGNode, DAGLink } from 'ipld-dag-pb'\nimport { bufferFromJson, bufferToJson } from './buffer'\n\nexport const dagNodeFromJson = (obj) => {\n  return new Promise((resolve, reject) => {\n    const links = obj.links.map(dagLinkFromJson)\n    DAGNode.create(bufferFromJson(obj.data), links, (err, dagNode) => {\n      if (err) return reject(err)\n      resolve(dagNode)\n    })\n  })\n}\n\nexport const dagNodeToJson = (dagNode) => ({\n  __ipfsPostMsgProxyType: 'DAGNode',\n  links: dagNode.links.map(dagLinkToJson),\n  data: bufferToJson(dagNode.data)\n})\n\nexport const isDagNode = (obj) => DAGNode.isDAGNode(obj)\nexport const isDagNodeJson = (obj) => obj && obj.__ipfsPostMsgProxyType === 'DAGNode'\n\nexport const preDagNodeFromJson = (index) => {\n  return (...args) => {\n    if (isDagNodeJson(args[index])) {\n      return dagNodeFromJson(args[index])\n        .then((dagNode) => {\n          args[index] = dagNode\n          return args\n        })\n    }\n    return args\n  }\n}\n\nexport const preDagNodeToJson = (index) => {\n  return (...args) => {\n    if (isDagNode(args[index])) {\n      args[index] = dagNodeToJson(args[index])\n    }\n    return args\n  }\n}\n\nexport const dagLinkFromJson = (obj) => new DAGLink(obj.name, obj.size, obj.multihash)\n\nexport const dagLinkToJson = (link) => Object.assign(\n  { __ipfsPostMsgProxyType: 'DAGLink' },\n  link.toJSON()\n)\n\nexport const isDagLink = (obj) => DAGLink.isDAGLink(obj)\nexport const isDagLinkJson = (obj) => obj && obj.__ipfsPostMsgProxyType === 'DAGLink'\n\nexport const preDagLinkFromJson = (index) => {\n  return (...args) => {\n    if (isDagLinkJson(args[index])) {\n      args[index] = dagLinkFromJson(args[index])\n    }\n    return args\n  }\n}\n\nexport const preDagLinkToJson = (index) => {\n  return (...args) => {\n    if (isDagLink(args[index])) {\n      args[index] = dagLinkToJson(args[index])\n    }\n    return args\n  }\n}\n"]}