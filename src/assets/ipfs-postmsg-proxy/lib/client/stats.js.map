{"version":3,"sources":["../../src/client/stats.js"],"names":["opts","api","bw","variadic","stats","totalIn","totalOut","rateIn","rateOut","bwReadableStream","source","bwPullStream","arguments","res","name","Object","assign","post","data","deferred","then","resolve","catch","err","abort"],"mappings":";;;;;;kBAQe,UAAUA,IAAV,EAAgB;AAC7B,MAAMC,MAAM;AACVC,QAAI,sBAAYC,QAAZ,CACF,mBACE,wBAAO,eAAP,EAAwBH,IAAxB,CADF,EAEE,UAACI,KAAD,EAAW;AACT,UAAIA,KAAJ,EAAW;AACT,YAAI,oBAAUA,MAAMC,OAAhB,CAAJ,EAA8B;AAC5BD,gBAAMC,OAAN,GAAgB,sBAAYD,MAAMC,OAAlB,CAAhB;AACD;;AAED,YAAI,oBAAUD,MAAME,QAAhB,CAAJ,EAA+B;AAC7BF,gBAAME,QAAN,GAAiB,sBAAYF,MAAME,QAAlB,CAAjB;AACD;;AAED,YAAI,oBAAUF,MAAMG,MAAhB,CAAJ,EAA6B;AAC3BH,gBAAMG,MAAN,GAAe,sBAAYH,MAAMG,MAAlB,CAAf;AACD;;AAED,YAAI,oBAAUH,MAAMI,OAAhB,CAAJ,EAA8B;AAC5BJ,gBAAMI,OAAN,GAAgB,sBAAYJ,MAAMI,OAAlB,CAAhB;AACD;AACF;;AAED,aAAOJ,KAAP;AACD,KAtBH,CADE,CADM;AA2BVK,oBA3BU,8BA2BU;AAClB,aAAO,6BAASC,MAAT,CAAgBT,IAAIU,YAAJ,YAAoBC,SAApB,CAAhB,CAAP;AACD,KA7BS;;AA8BVD,kBAAe,YAAM;AACnB,UAAMA,eAAe,mBACnB,wBAAO,yBAAP,EAAkCX,IAAlC,CADmB,EAEnB,UAACa,GAAD;AAAA,eAAS,4BAAIH,MAAJ,CAAWG,IAAIC,IAAf,EAAqBC,OAAOC,MAAP,CAAc,EAAd,EAAkBhB,IAAlB,EAAwB;AACpDiB,cADoD,gBAC9CJ,GAD8C,EACzC;AACT,gBAAMT,QAAQS,IAAIK,IAAlB;;AAEA,gBAAId,KAAJ,EAAW;AACT,kBAAI,oBAAUA,MAAMC,OAAhB,CAAJ,EAA8B;AAC5BD,sBAAMC,OAAN,GAAgB,sBAAYD,MAAMC,OAAlB,CAAhB;AACD;;AAED,kBAAI,oBAAUD,MAAME,QAAhB,CAAJ,EAA+B;AAC7BF,sBAAME,QAAN,GAAiB,sBAAYF,MAAME,QAAlB,CAAjB;AACD;;AAED,kBAAI,oBAAUF,MAAMG,MAAhB,CAAJ,EAA6B;AAC3BH,sBAAMG,MAAN,GAAe,sBAAYH,MAAMG,MAAlB,CAAf;AACD;;AAED,kBAAI,oBAAUH,MAAMI,OAAhB,CAAJ,EAA8B;AAC5BJ,sBAAMI,OAAN,GAAgB,sBAAYJ,MAAMI,OAAlB,CAAhB;AACD;AACF;;AAED,mBAAOK,GAAP;AACD;AAvBmD,SAAxB,CAArB,CAAT;AAAA,OAFmB,CAArB;;AA6BA,aAAO,YAAa;AAClB,YAAMM,WAAW,oBAAMT,MAAN,EAAjB;;AAEAC,iDACGS,IADH,CACQ,UAACP,GAAD;AAAA,iBAASM,SAASE,OAAT,CAAiBR,GAAjB,CAAT;AAAA,SADR,EAEGS,KAFH,CAES,UAACC,GAAD;AAAA,iBAASJ,SAASK,KAAT,CAAeD,GAAf,CAAT;AAAA,SAFT;;AAIA,eAAOJ,QAAP;AACD,OARD;AASD,KAvCa;AA9BJ,GAAZ;;AAwEA,SAAOlB,GAAP;AACD,C;;AAlFD;;AACA;;;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA","file":"stats.js","sourcesContent":["import { caller } from 'postmsg-rpc'\nimport callbackify from 'callbackify'\nimport { post } from 'prepost'\nimport defer from 'pull-defer'\nimport PMS from 'pull-postmsg-stream'\nimport toStream from 'pull-stream-to-stream'\nimport { isBigJson, bigFromJson } from '../serialization/big'\n\nexport default function (opts) {\n  const api = {\n    bw: callbackify.variadic(\n      post(\n        caller('ipfs.stats.bw', opts),\n        (stats) => {\n          if (stats) {\n            if (isBigJson(stats.totalIn)) {\n              stats.totalIn = bigFromJson(stats.totalIn)\n            }\n\n            if (isBigJson(stats.totalOut)) {\n              stats.totalOut = bigFromJson(stats.totalOut)\n            }\n\n            if (isBigJson(stats.rateIn)) {\n              stats.rateIn = bigFromJson(stats.rateIn)\n            }\n\n            if (isBigJson(stats.rateOut)) {\n              stats.rateOut = bigFromJson(stats.rateOut)\n            }\n          }\n\n          return stats\n        }\n      )\n    ),\n    bwReadableStream () {\n      return toStream.source(api.bwPullStream(...arguments))\n    },\n    bwPullStream: (() => {\n      const bwPullStream = post(\n        caller('ipfs.stats.bwPullStream', opts),\n        (res) => PMS.source(res.name, Object.assign({}, opts, {\n          post (res) {\n            const stats = res.data\n\n            if (stats) {\n              if (isBigJson(stats.totalIn)) {\n                stats.totalIn = bigFromJson(stats.totalIn)\n              }\n\n              if (isBigJson(stats.totalOut)) {\n                stats.totalOut = bigFromJson(stats.totalOut)\n              }\n\n              if (isBigJson(stats.rateIn)) {\n                stats.rateIn = bigFromJson(stats.rateIn)\n              }\n\n              if (isBigJson(stats.rateOut)) {\n                stats.rateOut = bigFromJson(stats.rateOut)\n              }\n            }\n\n            return res\n          }\n        }))\n      )\n\n      return (...args) => {\n        const deferred = defer.source()\n\n        bwPullStream(...args)\n          .then((res) => deferred.resolve(res))\n          .catch((err) => deferred.abort(err))\n\n        return deferred\n      }\n    })()\n  }\n\n  return api\n}\n"]}