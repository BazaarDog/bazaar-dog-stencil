{"version":3,"sources":["../../src/client/dht.js"],"names":["opts","put","variadic","get","findprovs","res","Promise","all","map","item","resolve","findpeer","provide","query"],"mappings":";;;;;;kBAOe,UAAUA,IAAV,EAAgB;AAC7B,SAAO;AACLC,SAAK,sBAAYC,QAAZ,CAAqB,wBAAO,cAAP,EAAuBF,IAAvB,CAArB,CADA;AAELG,SAAK,sBAAYD,QAAZ,CAAqB,wBAAO,cAAP,EAAuBF,IAAvB,CAArB,CAFA;AAGLI,eAAW,sBAAYF,QAAZ,CACT,kBACE,6BAAgB,CAAhB,CADF,EAEE,mBACE,wBAAO,oBAAP,EAA6BF,IAA7B,CADF,EAEE,UAACK,GAAD;AAAA,aAASC,QAAQC,GAAR,CACPF,IAAIG,GAAJ,CAAQ,UAACC,IAAD;AAAA,eAAU,sBAAWA,IAAX,IAAmB,4BAAiBA,IAAjB,CAAnB,GAA4CH,QAAQI,OAAR,CAAgBD,IAAhB,CAAtD;AAAA,OAAR,CADO,CAAT;AAAA,KAFF,CAFF,CADS,CAHN;AAcLE,cAAU,sBAAYT,QAAZ,CACR,kBACE,2BAAgB,CAAhB,CADF,EAEE,mBACE,wBAAO,mBAAP,EAA4BF,IAA5B,CADF,EAEE,UAACK,GAAD;AAAA,aAAS,sBAAWA,GAAX,IAAkB,4BAAiBA,GAAjB,CAAlB,GAA0CA,GAAnD;AAAA,KAFF,CAFF,CADQ,CAdL;AAuBLO,aAAS,sBAAYV,QAAZ,CACP,kBACE,6BAAgB,CAAhB,CADF,EAEE,oCAAuB,CAAvB,CAFF,EAGE,uBAAa,CAAb,CAHF,EAIE,8BAAoB,CAApB,CAJF,EAKE,wBAAO,kBAAP,EAA2BF,IAA3B,CALF,CADO,CAvBJ;AAgCLa,WAAO,sBAAYX,QAAZ,CACL,kBACE,2BAAgB,CAAhB,CADF,EAEE,mBACE,wBAAO,gBAAP,EAAyBF,IAAzB,CADF,EAEE,UAACK,GAAD;AAAA,aAASC,QAAQC,GAAR,CACPF,IAAIG,GAAJ,CAAQ,UAACC,IAAD;AAAA,eAAU,sBAAWA,IAAX,IAAmB,4BAAiBA,IAAjB,CAAnB,GAA4CH,QAAQI,OAAR,CAAgBD,IAAhB,CAAtD;AAAA,OAAR,CADO,CAAT;AAAA,KAFF,CAFF,CADK;AAhCF,GAAP;AA4CD,C;;AApDD;;AACA;;;;AACA;;AACA;;AACA;;AACA","file":"dht.js","sourcesContent":["import { caller } from 'postmsg-rpc'\nimport callbackify from 'callbackify'\nimport { pre, post } from 'prepost'\nimport { preCidToJson, preArrayOfCidToJson } from '../serialization/cid'\nimport { prePeerIdToJson, peerInfoFromJson, isPeerInfo } from '../serialization/peer'\nimport { preBufferToJson, preArrayOfBufferToJson } from '../serialization/buffer'\n\nexport default function (opts) {\n  return {\n    put: callbackify.variadic(caller('ipfs.dht.put', opts)),\n    get: callbackify.variadic(caller('ipfs.dht.get', opts)),\n    findprovs: callbackify.variadic(\n      pre(\n        preBufferToJson(0),\n        post(\n          caller('ipfs.dht.findprovs', opts),\n          (res) => Promise.all(\n            res.map((item) => isPeerInfo(item) ? peerInfoFromJson(item) : Promise.resolve(item))\n          )\n        )\n      )\n    ),\n    findpeer: callbackify.variadic(\n      pre(\n        prePeerIdToJson(0),\n        post(\n          caller('ipfs.dht.findpeer', opts),\n          (res) => isPeerInfo(res) ? peerInfoFromJson(res) : res\n        )\n      )\n    ),\n    provide: callbackify.variadic(\n      pre(\n        preBufferToJson(0),\n        preArrayOfBufferToJson(0),\n        preCidToJson(0),\n        preArrayOfCidToJson(0),\n        caller('ipfs.dht.provide', opts)\n      )\n    ),\n    query: callbackify.variadic(\n      pre(\n        prePeerIdToJson(0),\n        post(\n          caller('ipfs.dht.query', opts),\n          (res) => Promise.all(\n            res.map((item) => isPeerInfo(item) ? peerInfoFromJson(item) : Promise.resolve(item))\n          )\n        )\n      )\n    )\n  }\n}\n"]}