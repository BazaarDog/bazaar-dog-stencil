{"version":3,"sources":["../../src/client/bitswap.js"],"names":["opts","ledger","variadic","reprovide","stat","stats","blocksReceived","dataReceived","blocksSent","dataSent","dupBlksReceived","dupDataReceived","unwant","wantlist"],"mappings":";;;;;;kBAKe,UAAUA,IAAV,EAAgB;AAC7B,SAAO;AACLC,YAAQ,sBAAYC,QAAZ,CAAqB,wBAAO,qBAAP,EAA8BF,IAA9B,CAArB,CADH;AAELG,eAAW,sBAAYD,QAAZ,CAAqB,wBAAO,wBAAP,EAAiCF,IAAjC,CAArB,CAFN;AAGLI,UAAM,2BACJ,mBACE,wBAAO,mBAAP,EAA4BJ,IAA5B,CADF,EAEE,UAACK,KAAD,EAAW;AACT,UAAIA,KAAJ,EAAW;AACT,YAAI,oBAAUA,MAAMC,cAAhB,CAAJ,EAAqC;AACnCD,gBAAMC,cAAN,GAAuB,sBAAYD,MAAMC,cAAlB,CAAvB;AACD;;AAED,YAAI,oBAAUD,MAAME,YAAhB,CAAJ,EAAmC;AACjCF,gBAAME,YAAN,GAAqB,sBAAYF,MAAME,YAAlB,CAArB;AACD;;AAED,YAAI,oBAAUF,MAAMG,UAAhB,CAAJ,EAAiC;AAC/BH,gBAAMG,UAAN,GAAmB,sBAAYH,MAAMG,UAAlB,CAAnB;AACD;;AAED,YAAI,oBAAUH,MAAMI,QAAhB,CAAJ,EAA+B;AAC7BJ,gBAAMI,QAAN,GAAiB,sBAAYJ,MAAMI,QAAlB,CAAjB;AACD;;AAED,YAAI,oBAAUJ,MAAMK,eAAhB,CAAJ,EAAsC;AACpCL,gBAAMK,eAAN,GAAwB,sBAAYL,MAAMK,eAAlB,CAAxB;AACD;;AAED,YAAI,oBAAUL,MAAMM,eAAhB,CAAJ,EAAsC;AACpCN,gBAAMM,eAAN,GAAwB,sBAAYN,MAAMM,eAAlB,CAAxB;AACD;AACF;;AAED,aAAON,KAAP;AACD,KA9BH,CADI,CAHD;AAqCLO,YAAQ,sBAAYV,QAAZ,CAAqB,wBAAO,wBAAP,EAAiCF,IAAjC,CAArB,CArCH;AAsCLa,cAAU,sBAAYX,QAAZ,CAAqB,wBAAO,wBAAP,EAAiCF,IAAjC,CAArB;AAtCL,GAAP;AAwCD,C;;AA9CD;;AACA;;;;AACA;;AACA","file":"bitswap.js","sourcesContent":["import { caller } from 'postmsg-rpc'\nimport callbackify from 'callbackify'\nimport { post } from 'prepost'\nimport { isBigJson, bigFromJson } from '../serialization/big'\n\nexport default function (opts) {\n  return {\n    ledger: callbackify.variadic(caller('ipfs.bitswap.ledger', opts)),\n    reprovide: callbackify.variadic(caller('ipfs.bitswap.reprovide', opts)),\n    stat: callbackify(\n      post(\n        caller('ipfs.bitswap.stat', opts),\n        (stats) => {\n          if (stats) {\n            if (isBigJson(stats.blocksReceived)) {\n              stats.blocksReceived = bigFromJson(stats.blocksReceived)\n            }\n\n            if (isBigJson(stats.dataReceived)) {\n              stats.dataReceived = bigFromJson(stats.dataReceived)\n            }\n\n            if (isBigJson(stats.blocksSent)) {\n              stats.blocksSent = bigFromJson(stats.blocksSent)\n            }\n\n            if (isBigJson(stats.dataSent)) {\n              stats.dataSent = bigFromJson(stats.dataSent)\n            }\n\n            if (isBigJson(stats.dupBlksReceived)) {\n              stats.dupBlksReceived = bigFromJson(stats.dupBlksReceived)\n            }\n\n            if (isBigJson(stats.dupDataReceived)) {\n              stats.dupDataReceived = bigFromJson(stats.dupDataReceived)\n            }\n          }\n\n          return stats\n        }\n      )\n    ),\n    unwant: callbackify.variadic(caller('ipfs.bitswap.reprovide', opts)),\n    wantlist: callbackify.variadic(caller('ipfs.bitswap.reprovide', opts))\n  }\n}\n"]}