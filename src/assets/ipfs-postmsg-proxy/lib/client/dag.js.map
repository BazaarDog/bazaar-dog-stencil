{"version":3,"sources":["../../src/client/dag.js"],"names":["opts","put","variadic","args","cid","get","res","value","then","tree"],"mappings":";;;;;;kBAQe,UAAUA,IAAV,EAAgB;AAC7B,SAAO;AACLC,SAAK,sBAAYC,QAAZ,CACH,kBACE,2BAAiB,CAAjB,CADF,EAEE,YAAa;AAAA,wCAATC,IAAS;AAATA,YAAS;AAAA;;AACX,UAAIA,KAAK,CAAL,KAAW,CAAC,wBAAcA,KAAK,CAAL,CAAd,CAAhB,EAAwC;AACtCA,aAAK,CAAL,IAAU,6BAAcA,KAAK,CAAL,CAAd,yCAAV;AACD;;AAED,UAAIA,KAAK,CAAL,KAAWA,KAAK,CAAL,EAAQC,GAAvB,EAA4B;AAC1B,YAAI,sBAASD,KAAK,CAAL,EAAQC,GAAjB,CAAJ,EAA2B;AACzBD,eAAK,CAAL,EAAQC,GAAR,GAAc,0BAAaD,KAAK,CAAL,EAAQC,GAArB,CAAd;AACD,SAFD,MAEO,IAAI,gBAAMD,KAAK,CAAL,EAAQC,GAAd,CAAJ,EAAwB;AAC7BD,eAAK,CAAL,EAAQC,GAAR,GAAc,oBAAUD,KAAK,CAAL,EAAQC,GAAlB,CAAd;AACD;AACF;;AAED,aAAOD,IAAP;AACD,KAhBH,EAiBE,mBACE,wBAAO,cAAP,EAAuBH,IAAvB,CADF,mBAjBF,CADG,CADA;AAyBLK,SAAK,sBAAYH,QAAZ,CACH,kBACE,6BAAgB,CAAhB,CADF,EAEE,uBAAa,CAAb,CAFF,EAGE,mBACE,wBAAO,cAAP,EAAuBF,IAAvB,CADF,EAEE,UAACM,GAAD,EAAS;AACP,UAAI,wBAAcA,IAAIC,KAAlB,CAAJ,EAA8B;AAC5B,eAAO,0BAAgBD,IAAIC,KAApB,EAA2BC,IAA3B,CAAgC,UAACD,KAAD;AAAA,iBAAY,EAAEA,YAAF,EAAZ;AAAA,SAAhC,CAAP;AACD;;AAED,UAAI,0BAAaD,IAAIC,KAAjB,CAAJ,EAA6B;AAC3BD,YAAIC,KAAJ,GAAY,4BAAeD,IAAIC,KAAnB,CAAZ;AACD,OAFD,MAEO,IAAID,IAAIC,KAAR,EAAe;AAAE;AACtBD,YAAIC,KAAJ,GAAY,6BAAcD,IAAIC,KAAlB,+CAAZ;AACD;;AAED,aAAOD,GAAP;AACD,KAdH,CAHF,CADG,CAzBA;AA+CLG,UAAM,sBAAYP,QAAZ,CACJ,kBACE,6BAAgB,CAAhB,CADF,EAEE,uBAAa,CAAb,CAFF,EAGE,wBAAO,eAAP,EAAwBF,IAAxB,CAHF,CADI;AA/CD,GAAP;AAuDD,C;;AAhED;;AACA;;;;AACA;;AACA;;AACA;;AACA;;AACA","file":"dag.js","sourcesContent":["import { caller } from 'postmsg-rpc'\nimport callbackify from 'callbackify'\nimport { pre, post } from 'prepost'\nimport { isDagNodeJson, preDagNodeToJson, dagNodeFromJson } from '../serialization/dag'\nimport { isCid, cidFromJson, cidToJson, preCidToJson } from '../serialization/cid'\nimport { isBuffer, isBufferJson, preBufferToJson, bufferToJson, bufferFromJson } from '../serialization/buffer'\nimport convertValues from '../serialization/utils/convert-values'\n\nexport default function (opts) {\n  return {\n    put: callbackify.variadic(\n      pre(\n        preDagNodeToJson(0),\n        (...args) => {\n          if (args[0] && !isDagNodeJson(args[0])) {\n            args[0] = convertValues(args[0], isBuffer, bufferToJson)\n          }\n\n          if (args[1] && args[1].cid) {\n            if (isBuffer(args[1].cid)) {\n              args[1].cid = bufferToJson(args[1].cid)\n            } else if (isCid(args[1].cid)) {\n              args[1].cid = cidToJson(args[1].cid)\n            }\n          }\n\n          return args\n        },\n        post(\n          caller('ipfs.dag.put', opts),\n          cidFromJson\n        )\n      )\n    ),\n    get: callbackify.variadic(\n      pre(\n        preBufferToJson(0),\n        preCidToJson(0),\n        post(\n          caller('ipfs.dag.get', opts),\n          (res) => {\n            if (isDagNodeJson(res.value)) {\n              return dagNodeFromJson(res.value).then((value) => ({ value }))\n            }\n\n            if (isBufferJson(res.value)) {\n              res.value = bufferFromJson(res.value)\n            } else if (res.value) { // TODO: CBOR node, is this correct?\n              res.value = convertValues(res.value, isBufferJson, bufferFromJson)\n            }\n\n            return res\n          }\n        )\n      )\n    ),\n    tree: callbackify.variadic(\n      pre(\n        preBufferToJson(0),\n        preCidToJson(0),\n        caller('ipfs.dag.tree', opts)\n      )\n    )\n  }\n}\n"]}