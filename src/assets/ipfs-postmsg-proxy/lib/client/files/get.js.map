{"version":3,"sources":["../../../src/client/files/get.js"],"names":["opts","api","get","variadic","files","map","file","content","getReadableStream","source","getPullStream","arguments","res","name","Object","assign","post","data","deferred","then","resolve","catch","err","abort"],"mappings":";;;;;;kBAUe,UAAUA,IAAV,EAAgB;AAC7B,MAAMC,MAAM;AACVC,SAAK,sBAAYC,QAAZ,CACH,kBACE,6BAAgB,CAAhB,CADF,EAEE,uBAAa,CAAb,CAFF,EAGE,mBACE,wBAAO,gBAAP,EAAyBH,IAAzB,CADF,EAEE,UAACI,KAAD;AAAA,aAAWA,MAAMC,GAAN,CAAU,UAACC,IAAD,EAAU;AAC7B,YAAIA,KAAKC,OAAT,EAAkB;AAChBD,eAAKC,OAAL,GAAe,4BAAeD,KAAKC,OAApB,CAAf;AACD;;AAED,eAAOD,IAAP;AACD,OANU,CAAX;AAAA,KAFF,CAHF,CADG,CADK;AAiBVE,qBAjBU,+BAiBW;AACnB,aAAO,6BAASC,MAAT,CACL,0BACER,IAAIS,aAAJ,YAAqBC,SAArB,CADF,EAEE,qBAAKN,GAAL,CAAS,UAACC,IAAD,EAAU;AACjB,YAAIA,KAAKC,OAAT,EAAkB;AAChBD,eAAKC,OAAL,GAAe,6BAASE,MAAT,CAAgBH,KAAKC,OAArB,CAAf;AACD;AACD,eAAOD,IAAP;AACD,OALD,CAFF,CADK,CAAP;AAWD,KA7BS;;AA8BVI,mBAAgB,YAAM;AACpB,UAAMA,gBAAgB,kBACpB,6BAAgB,CAAhB,CADoB,EAEpB,uBAAa,CAAb,CAFoB,EAGpB,mBACE,wBAAO,0BAAP,EAAmCV,IAAnC,CADF,EAEE,UAACY,GAAD;AAAA,eAAS,0BACP,4BAAIH,MAAJ,CAAWG,IAAIC,IAAf,EAAqBb,IAArB,CADO,EAEP,qBAAKK,GAAL,CAAS,UAACC,IAAD,EAAU;AACjB,cAAIA,KAAKC,OAAT,EAAkB;AAChBD,iBAAKC,OAAL,GAAe,4BAAIE,MAAJ,CAAWH,KAAKC,OAAL,CAAaM,IAAxB,EAA8BC,OAAOC,MAAP,CAAc,EAAd,EAAkBf,IAAlB,EAAwB;AACnEgB,kBADmE,gBAC7DJ,GAD6D,EACxD;AACT,oBAAI,0BAAaA,IAAIK,IAAjB,CAAJ,EAA4B;AAC1BL,sBAAIK,IAAJ,GAAW,4BAAeL,IAAIK,IAAnB,CAAX;AACD;;AAED,uBAAOL,GAAP;AACD;AAPkE,aAAxB,CAA9B,CAAf;AASD;;AAED,iBAAON,IAAP;AACD,SAdD,CAFO,CAAT;AAAA,OAFF,CAHoB,CAAtB;;AA0BA,aAAO,YAAa;AAClB,YAAMY,WAAW,oBAAMT,MAAN,EAAjB;;AAEAC,kDACGS,IADH,CACQ,UAACP,GAAD;AAAA,iBAASM,SAASE,OAAT,CAAiBR,GAAjB,CAAT;AAAA,SADR,EAEGS,KAFH,CAES,UAACC,GAAD;AAAA,iBAASJ,SAASK,KAAT,CAAeD,GAAf,CAAT;AAAA,SAFT;;AAIA,eAAOJ,QAAP;AACD,OARD;AASD,KApCc;AA9BL,GAAZ;;AAqEA,SAAOjB,GAAP;AACD,C;;AAjFD;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA","file":"get.js","sourcesContent":["import { caller } from 'postmsg-rpc'\nimport callbackify from 'callbackify'\nimport defer from 'pull-defer'\nimport pull from 'pull-stream'\nimport toStream from 'pull-stream-to-stream'\nimport PMS from 'pull-postmsg-stream'\nimport { pre, post } from 'prepost'\nimport { preCidToJson } from '../../serialization/cid'\nimport { isBufferJson, preBufferToJson, bufferFromJson } from '../../serialization/buffer'\n\nexport default function (opts) {\n  const api = {\n    get: callbackify.variadic(\n      pre(\n        preBufferToJson(0),\n        preCidToJson(0),\n        post(\n          caller('ipfs.files.get', opts),\n          (files) => files.map((file) => {\n            if (file.content) {\n              file.content = bufferFromJson(file.content)\n            }\n\n            return file\n          })\n        )\n      )\n    ),\n    getReadableStream () {\n      return toStream.source(\n        pull(\n          api.getPullStream(...arguments),\n          pull.map((file) => {\n            if (file.content) {\n              file.content = toStream.source(file.content)\n            }\n            return file\n          })\n        )\n      )\n    },\n    getPullStream: (() => {\n      const getPullStream = pre(\n        preBufferToJson(0),\n        preCidToJson(0),\n        post(\n          caller('ipfs.files.getPullStream', opts),\n          (res) => pull(\n            PMS.source(res.name, opts),\n            pull.map((file) => {\n              if (file.content) {\n                file.content = PMS.source(file.content.name, Object.assign({}, opts, {\n                  post (res) {\n                    if (isBufferJson(res.data)) {\n                      res.data = bufferFromJson(res.data)\n                    }\n\n                    return res\n                  }\n                }))\n              }\n\n              return file\n            })\n          )\n        )\n      )\n\n      return (...args) => {\n        const deferred = defer.source()\n\n        getPullStream(...args)\n          .then((res) => deferred.resolve(res))\n          .catch((err) => deferred.abort(err))\n\n        return deferred\n      }\n    })()\n  }\n\n  return api\n}\n"]}