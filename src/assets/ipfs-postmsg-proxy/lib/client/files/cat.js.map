{"version":3,"sources":["../../../src/client/files/cat.js"],"names":["opts","api","cat","variadic","catReadableStream","source","catPullStream","arguments","res","name","Object","assign","post","data","deferred","then","resolve","catch","err","abort"],"mappings":";;;;;;kBASe,UAAUA,IAAV,EAAgB;AAC7B,MAAMC,MAAM;AACVC,SAAK,sBAAYC,QAAZ,CACH,kBACE,6BAAgB,CAAhB,CADF,EAEE,uBAAa,CAAb,CAFF,EAGE,mBACE,wBAAO,gBAAP,EAAyBH,IAAzB,CADF,yBAHF,CADG,CADK;AAWVI,qBAXU,+BAWW;AACnB,aAAO,6BAASC,MAAT,CAAgBJ,IAAIK,aAAJ,YAAqBC,SAArB,CAAhB,CAAP;AACD,KAbS;;AAcVD,mBAAgB,YAAM;AACpB,UAAMA,gBAAgB,kBACpB,6BAAgB,CAAhB,CADoB,EAEpB,uBAAa,CAAb,CAFoB,EAGpB,mBACE,wBAAO,0BAAP,EAAmCN,IAAnC,CADF,EAEE,UAACQ,GAAD;AAAA,eAAS,4BAAIH,MAAJ,CAAWG,IAAIC,IAAf,EAAqBC,OAAOC,MAAP,CAAc,EAAd,EAAkBX,IAAlB,EAAwB;AACpDY,cADoD,gBAC9CJ,GAD8C,EACzC;AACT,gBAAI,0BAAaA,IAAIK,IAAjB,CAAJ,EAA4B;AAC1BL,kBAAIK,IAAJ,GAAW,4BAAeL,IAAIK,IAAnB,CAAX;AACD;;AAED,mBAAOL,GAAP;AACD;AAPmD,SAAxB,CAArB,CAAT;AAAA,OAFF,CAHoB,CAAtB;;AAiBA,aAAO,YAAa;AAClB,YAAMM,WAAW,oBAAMT,MAAN,EAAjB;;AAEAC,kDACGS,IADH,CACQ,UAACP,GAAD;AAAA,iBAASM,SAASE,OAAT,CAAiBR,GAAjB,CAAT;AAAA,SADR,EAEGS,KAFH,CAES,UAACC,GAAD;AAAA,iBAASJ,SAASK,KAAT,CAAeD,GAAf,CAAT;AAAA,SAFT;;AAIA,eAAOJ,QAAP;AACD,OARD;AASD,KA3Bc;AAdL,GAAZ;;AA4CA,SAAOb,GAAP;AACD,C;;AAvDD;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA","file":"cat.js","sourcesContent":["import { caller } from 'postmsg-rpc'\nimport callbackify from 'callbackify'\nimport defer from 'pull-defer'\nimport toStream from 'pull-stream-to-stream'\nimport PMS from 'pull-postmsg-stream'\nimport { pre, post } from 'prepost'\nimport { preCidToJson } from '../../serialization/cid'\nimport { isBufferJson, preBufferToJson, bufferFromJson } from '../../serialization/buffer'\n\nexport default function (opts) {\n  const api = {\n    cat: callbackify.variadic(\n      pre(\n        preBufferToJson(0),\n        preCidToJson(0),\n        post(\n          caller('ipfs.files.cat', opts),\n          bufferFromJson\n        )\n      )\n    ),\n    catReadableStream () {\n      return toStream.source(api.catPullStream(...arguments))\n    },\n    catPullStream: (() => {\n      const catPullStream = pre(\n        preBufferToJson(0),\n        preCidToJson(0),\n        post(\n          caller('ipfs.files.catPullStream', opts),\n          (res) => PMS.source(res.name, Object.assign({}, opts, {\n            post (res) {\n              if (isBufferJson(res.data)) {\n                res.data = bufferFromJson(res.data)\n              }\n\n              return res\n            }\n          }))\n        )\n      )\n\n      return (...args) => {\n        const deferred = defer.source()\n\n        catPullStream(...args)\n          .then((res) => deferred.resolve(res))\n          .catch((err) => deferred.abort(err))\n\n        return deferred\n      }\n    })()\n  }\n\n  return api\n}\n"]}