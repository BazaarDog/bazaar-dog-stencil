{"version":3,"sources":["../../../src/server/files/cat.js"],"names":["getIpfs","opts","cat","pre","files","catPullStream","res","Promise","resolve","readFnName","sink","Object","assign","post","data"],"mappings":";;;;;;kBASe,UAAUA,OAAV,EAAmBC,IAAnB,EAAyB;AACtC,SAAO;AACLC,SAAK,wBAAO,gBAAP,EAAyB,kBAC5B,+BAAkB,CAAlB,CAD4B,EAE5B,yBAAe,CAAf,CAF4B,EAG5BD,KAAKE,GAAL,CAAS,WAAT,CAH4B,EAI5B,mBACE;AAAA;;AAAA,aAAa,4BAAUC,KAAV,EAAgBF,GAAhB,iCAAb;AAAA,KADF,uBAJ4B,CAAzB,EAQFD,IARE,CADA;AAULI,mBAAe,wBAAO,0BAAP,EAAmC,kBAChD,+BAAkB,CAAlB,CADgD,EAEhD,yBAAe,CAAf,CAFgD,EAGhDJ,KAAKE,GAAL,CAAS,qBAAT,CAHgD,EAIhD,mBACE;AAAA;;AAAA,aAAa,6BAAUC,KAAV,EAAgBC,aAAhB,kCAAb;AAAA,KADF,EAEE,UAACC,GAAD;AAAA,aAAS,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAChC,YAAMC,aAAa,wBAAnB;;AAEA,kCACEH,GADF,EAEE,4BAAII,IAAJ,CAASD,UAAT,EAAqBE,OAAOC,MAAP,CAAc,EAAd,EAAkBX,IAAlB,EAAwB;AAC3CY,cAD2C,gBACrCP,GADqC,EAChC;AACT,gBAAI,sBAASA,IAAIQ,IAAb,CAAJ,EAAwB;AACtBR,kBAAIQ,IAAJ,GAAW,0BAAaR,IAAIQ,IAAjB,CAAX;AACD;;AAED,mBAAOR,GAAP;AACD;AAP0C,SAAxB,CAArB,CAFF;;AAaAE,gBAAQ,8BAAeC,UAAf,CAAR;AACD,OAjBQ,CAAT;AAAA,KAFF,CAJgD,CAAnC,EAyBZR,IAzBY;AAVV,GAAP;AAqCD,C;;AA/CD;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA","file":"cat.js","sourcesContent":["import { expose } from 'postmsg-rpc'\nimport { pre, post } from 'prepost'\nimport pull from 'pull-stream'\nimport PMS from 'pull-postmsg-stream'\nimport shortid from 'shortid'\nimport { preCidFromJson } from '../../serialization/cid'\nimport { isBuffer, preBufferFromJson, bufferToJson } from '../../serialization/buffer'\nimport { functionToJson } from '../../serialization/function'\n\nexport default function (getIpfs, opts) {\n  return {\n    cat: expose('ipfs.files.cat', pre(\n      preBufferFromJson(0),\n      preCidFromJson(0),\n      opts.pre('files.cat'),\n      post(\n        (...args) => getIpfs().files.cat(...args),\n        bufferToJson\n      )\n    ), opts),\n    catPullStream: expose('ipfs.files.catPullStream', pre(\n      preBufferFromJson(0),\n      preCidFromJson(0),\n      opts.pre('files.catPullStream'),\n      post(\n        (...args) => getIpfs().files.catPullStream(...args),\n        (res) => new Promise((resolve) => {\n          const readFnName = shortid()\n\n          pull(\n            res,\n            PMS.sink(readFnName, Object.assign({}, opts, {\n              post (res) {\n                if (isBuffer(res.data)) {\n                  res.data = bufferToJson(res.data)\n                }\n\n                return res\n              }\n            }))\n          )\n\n          resolve(functionToJson(readFnName))\n        })\n      )\n    ), opts)\n  }\n}\n"]}