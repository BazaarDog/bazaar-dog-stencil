{"version":3,"sources":["../../src/server/dag.js"],"names":["getIpfs","opts","put","args","cid","pre","dag","get","res","value","tree"],"mappings":";;;;;;kBAOe,UAAUA,OAAV,EAAmBC,IAAnB,EAAyB;AACtC,SAAO;AACLC,SAAK,wBAAO,cAAP,EAAuB,kBAC1B,6BAAmB,CAAnB,CAD0B,EAE1B,YAAa;AAAA,wCAATC,IAAS;AAATA,YAAS;AAAA;;AACX;AACA,UAAIA,KAAK,CAAL,KAAW,CAAC,oBAAUA,KAAK,CAAL,CAAV,CAAhB,EAAoC;AAClCA,aAAK,CAAL,IAAU,6BAAcA,KAAK,CAAL,CAAd,+CAAV;AACD;;AAED,UAAIA,KAAK,CAAL,KAAWA,KAAK,CAAL,EAAQC,GAAvB,EAA4B;AAC1B,YAAI,0BAAaD,KAAK,CAAL,EAAQC,GAArB,CAAJ,EAA+B;AAC7BD,eAAK,CAAL,EAAQC,GAAR,GAAc,4BAAeD,KAAK,CAAL,EAAQC,GAAvB,CAAd;AACD,SAFD,MAEO,IAAI,oBAAUD,KAAK,CAAL,EAAQC,GAAlB,CAAJ,EAA4B;AACjCD,eAAK,CAAL,EAAQC,GAAR,GAAc,sBAAYD,KAAK,CAAL,EAAQC,GAApB,CAAd;AACD;AACF;;AAED,aAAOD,IAAP;AACD,KAjByB,EAkB1BF,KAAKI,GAAL,CAAS,SAAT,CAlB0B,EAmB1B,mBACE;AAAA;;AAAA,aAAa,0BAAUC,GAAV,EAAcJ,GAAd,+BAAb;AAAA,KADF,iBAnB0B,CAAvB,EAuBFD,IAvBE,CADA;AAyBLM,SAAK,wBAAO,cAAP,EAAuB,kBAC1B,+BAAkB,CAAlB,CAD0B,EAE1B,yBAAe,CAAf,CAF0B,EAG1BN,KAAKI,GAAL,CAAS,SAAT,CAH0B,EAI1B,mBACE;AAAA;;AAAA,aAAa,2BAAUC,GAAV,EAAcC,GAAd,gCAAb;AAAA,KADF,EAEE,UAACC,GAAD,EAAS;AACP,UAAI,oBAAUA,IAAIC,KAAd,CAAJ,EAA0B;AACxBD,YAAIC,KAAJ,GAAY,wBAAcD,IAAIC,KAAlB,CAAZ;AACD,OAFD,MAEO,IAAI,sBAASD,IAAIC,KAAb,CAAJ,EAAyB;AAC9BD,YAAIC,KAAJ,GAAY,0BAAaD,IAAIC,KAAjB,CAAZ;AACD,OAFM,MAEA;AACLD,YAAIC,KAAJ,GAAY,6BAAcD,IAAIC,KAAlB,yCAAZ;AACD;;AAED,aAAOD,GAAP;AACD,KAZH,CAJ0B,CAAvB,EAkBFP,IAlBE,CAzBA;AA4CLS,UAAM,wBAAO,eAAP,EAAwB,kBAC5B,+BAAkB,CAAlB,CAD4B,EAE5B,yBAAe,CAAf,CAF4B,EAG5BT,KAAKI,GAAL,CAAS,UAAT,CAH4B,EAI5B;AAAA;;AAAA,aAAa,2BAAUC,GAAV,EAAcI,IAAd,gCAAb;AAAA,KAJ4B,CAAxB,EAKHT,IALG;AA5CD,GAAP;AAmDD,C;;AA3DD;;AACA;;AACA;;AACA;;AACA;;AACA","file":"dag.js","sourcesContent":["import { expose } from 'postmsg-rpc'\nimport { pre, post } from 'prepost'\nimport { isDagNode, dagNodeToJson, preDagNodeFromJson } from '../serialization/dag'\nimport { isCidJson, cidToJson, cidFromJson, preCidFromJson } from '../serialization/cid'\nimport { isBuffer, isBufferJson, bufferFromJson, preBufferFromJson, bufferToJson } from '../serialization/buffer'\nimport convertValues from '../serialization/utils/convert-values'\n\nexport default function (getIpfs, opts) {\n  return {\n    put: expose('ipfs.dag.put', pre(\n      preDagNodeFromJson(0),\n      (...args) => {\n        // TODO: CBOR node, is this correct?\n        if (args[0] && !isDagNode(args[0])) {\n          args[0] = convertValues(args[0], isBufferJson, bufferFromJson)\n        }\n\n        if (args[1] && args[1].cid) {\n          if (isBufferJson(args[1].cid)) {\n            args[1].cid = bufferFromJson(args[1].cid)\n          } else if (isCidJson(args[1].cid)) {\n            args[1].cid = cidFromJson(args[1].cid)\n          }\n        }\n\n        return args\n      },\n      opts.pre('dag.put'),\n      post(\n        (...args) => getIpfs().dag.put(...args),\n        cidToJson\n      )\n    ), opts),\n    get: expose('ipfs.dag.get', pre(\n      preBufferFromJson(0),\n      preCidFromJson(0),\n      opts.pre('dag.get'),\n      post(\n        (...args) => getIpfs().dag.get(...args),\n        (res) => {\n          if (isDagNode(res.value)) {\n            res.value = dagNodeToJson(res.value)\n          } else if (isBuffer(res.value)) {\n            res.value = bufferToJson(res.value)\n          } else {\n            res.value = convertValues(res.value, isBuffer, bufferToJson)\n          }\n\n          return res\n        }\n      )\n    ), opts),\n    tree: expose('ipfs.dag.tree', pre(\n      preBufferFromJson(0),\n      preCidFromJson(0),\n      opts.pre('dag.tree'),\n      (...args) => getIpfs().dag.tree(...args)\n    ), opts)\n  }\n}\n"]}