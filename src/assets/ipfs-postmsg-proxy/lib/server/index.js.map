{"version":3,"sources":["../../src/server/index.js"],"names":["closeProxyServer","getIpfs","opts","pre","preObj","fnName","bitswap","block","bootstrap","config","dag","dht","dns","files","id","key","ls","name","object","pin","pubsub","repo","stats","stop","swarm","version","obj","Object","keys","forEach","k","close"],"mappings":";;;;;QA+DgBA,gB,GAAAA,gB;;AA/DhB;;AACA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;kBAEe,UAACC,OAAD,EAAUC,IAAV,EAAmB;AAChCA,SAAOA,QAAQ,EAAf;;AAEA,MAAI,OAAOA,KAAKC,GAAZ,KAAoB,UAAxB,EAAoC;AAClC,QAAMC,SAASF,KAAKC,GAAL,IAAY,EAA3B;AACAD,SAAKC,GAAL,GAAW,UAACE,MAAD;AAAA,aAAYD,OAAOC,MAAP,CAAZ;AAAA,KAAX;AACD;;AAED,SAAO;AACLC,aAAS,uBAAcL,OAAd,EAAuBC,IAAvB,CADJ;AAELK,WAAO,qBAAYN,OAAZ,EAAqBC,IAArB,CAFF;AAGLM,eAAW,yBAAgBP,OAAhB,EAAyBC,IAAzB,CAHN;AAILO,YAAQ,sBAAaR,OAAb,EAAsBC,IAAtB,CAJH;AAKLQ,SAAK,mBAAUT,OAAV,EAAmBC,IAAnB,CALA;AAMLS,SAAK,mBAAUV,OAAV,EAAmBC,IAAnB,CANA;AAOLU,SAAK,wBAAO,UAAP,EAAmB,kBACtBV,KAAKC,GAAL,CAAS,KAAT,CADsB,EAEtB;AAAA;;AAAA,aAAa,uBAAUS,GAAV,2BAAb;AAAA,KAFsB,CAAnB,EAGFV,IAHE,CAPA;AAWLW,WAAO,qBAAYZ,OAAZ,EAAqBC,IAArB,CAXF;AAYLY,QAAI,wBAAO,SAAP,EAAkB,kBACpBZ,KAAKC,GAAL,CAAS,IAAT,CADoB,EAEpB;AAAA,aAAMF,UAAUa,EAAV,EAAN;AAAA,KAFoB,CAAlB,EAGDZ,IAHC,CAZC;AAgBLa,SAAK,mBAAUd,OAAV,EAAmBC,IAAnB,CAhBA;AAiBLc,QAAI,kBAASf,OAAT,EAAkBC,IAAlB,CAjBC;AAkBLe,UAAM,oBAAWhB,OAAX,EAAoBC,IAApB,CAlBD;AAmBLgB,YAAQ,sBAAajB,OAAb,EAAsBC,IAAtB,CAnBH;AAoBLiB,SAAK,mBAAUlB,OAAV,EAAmBC,IAAnB,CApBA;AAqBLkB,YAAQ,sBAAanB,OAAb,EAAsBC,IAAtB,CArBH;AAsBLmB,UAAM,oBAAWpB,OAAX,EAAoBC,IAApB,CAtBD;AAuBLoB,WAAO,qBAAYrB,OAAZ,EAAqBC,IAArB,CAvBF;AAwBLqB,UAAM,wBAAO,WAAP,EAAoB,kBACxBrB,KAAKC,GAAL,CAAS,MAAT,CADwB,EAExB;AAAA,aAAMF,UAAUsB,IAAV,EAAN;AAAA,KAFwB,CAApB,EAGHrB,IAHG,CAxBD;AA4BLsB,WAAO,qBAAYvB,OAAZ,EAAqBC,IAArB,CA5BF;AA6BLuB,aAAS,wBAAO,cAAP,EAAuB,kBAC9BvB,KAAKC,GAAL,CAAS,SAAT,CAD8B,EAE9B;AAAA,aAAMF,UAAUwB,OAAV,EAAN;AAAA,KAF8B,CAAvB,EAGNvB,IAHM;AA7BJ,GAAP;AAkCD,C;;AAEM,SAASF,gBAAT,CAA2B0B,GAA3B,EAAgC;AACrCC,SAAOC,IAAP,CAAYF,GAAZ,EAAiBG,OAAjB,CAAyB,UAACC,CAAD,EAAO;AAC9B,QAAIJ,IAAII,CAAJ,EAAOC,KAAX,EAAkB;AAChBL,UAAII,CAAJ,EAAOC,KAAP;AACD,KAFD,MAEO;AACL/B,uBAAiB0B,IAAII,CAAJ,CAAjB;AACD;AACF,GAND;AAOD","file":"index.js","sourcesContent":["import { expose } from 'postmsg-rpc'\nimport { pre } from 'prepost'\nimport createBitswap from './bitswap'\nimport createBlock from './block'\nimport createBootstrap from './bootstrap'\nimport createConfig from './config'\nimport createDag from './dag'\nimport createDht from './dht'\nimport createFiles from './files'\nimport createKey from './key'\nimport createLs from './ls'\nimport createName from './name'\nimport createObject from './object'\nimport createPin from './pin'\nimport createPubsub from './pubsub'\nimport createRepo from './repo'\nimport createStats from './stats'\nimport createSwarm from './swarm'\n\nexport default (getIpfs, opts) => {\n  opts = opts || {}\n\n  if (typeof opts.pre !== 'function') {\n    const preObj = opts.pre || {}\n    opts.pre = (fnName) => preObj[fnName]\n  }\n\n  return {\n    bitswap: createBitswap(getIpfs, opts),\n    block: createBlock(getIpfs, opts),\n    bootstrap: createBootstrap(getIpfs, opts),\n    config: createConfig(getIpfs, opts),\n    dag: createDag(getIpfs, opts),\n    dht: createDht(getIpfs, opts),\n    dns: expose('ipfs.dns', pre(\n      opts.pre('dns'),\n      (...args) => getIpfs().dns(...args)\n    ), opts),\n    files: createFiles(getIpfs, opts),\n    id: expose('ipfs.id', pre(\n      opts.pre('id'),\n      () => getIpfs().id()\n    ), opts),\n    key: createKey(getIpfs, opts),\n    ls: createLs(getIpfs, opts),\n    name: createName(getIpfs, opts),\n    object: createObject(getIpfs, opts),\n    pin: createPin(getIpfs, opts),\n    pubsub: createPubsub(getIpfs, opts),\n    repo: createRepo(getIpfs, opts),\n    stats: createStats(getIpfs, opts),\n    stop: expose('ipfs.stop', pre(\n      opts.pre('stop'),\n      () => getIpfs().stop()\n    ), opts),\n    swarm: createSwarm(getIpfs, opts),\n    version: expose('ipfs.version', pre(\n      opts.pre('version'),\n      () => getIpfs().version()\n    ), opts)\n  }\n}\n\nexport function closeProxyServer (obj) {\n  Object.keys(obj).forEach((k) => {\n    if (obj[k].close) {\n      obj[k].close()\n    } else {\n      closeProxyServer(obj[k])\n    }\n  })\n}\n"]}